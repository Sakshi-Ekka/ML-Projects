{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "___\n",
    "\n",
    "<a href='http://www.pieriandata.com'> <img src='../Pierian_Data_Logo.png' /></a>\n",
    "___"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Natural Language Processing Project\n",
    "\n",
    "Welcome to the NLP Project for this section of the course. In this NLP project you will be attempting to classify Yelp Reviews into 1 star or 5 star categories based off the text content in the reviews. This will be a simpler procedure than the lecture, since we will utilize the pipeline methods for more complex tasks.\n",
    "\n",
    "We will use the [Yelp Review Data Set from Kaggle](https://www.kaggle.com/c/yelp-recsys-2013).\n",
    "\n",
    "Each observation in this dataset is a review of a particular business by a particular user.\n",
    "\n",
    "The \"stars\" column is the number of stars (1 through 5) assigned by the reviewer to the business. (Higher stars is better.) In other words, it is the rating of the business by the person who wrote the review.\n",
    "\n",
    "The \"cool\" column is the number of \"cool\" votes this review received from other Yelp users. \n",
    "\n",
    "All reviews start with 0 \"cool\" votes, and there is no limit to how many \"cool\" votes a review can receive. In other words, it is a rating of the review itself, not a rating of the business.\n",
    "\n",
    "The \"useful\" and \"funny\" columns are similar to the \"cool\" column.\n",
    "\n",
    "Let's get started! Just follow the directions below!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Imports\n",
    " **Import the usual suspects. :) **"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Data\n",
    "\n",
    "**Read the yelp.csv file and set it as a dataframe called yelp.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "yelp = pd.read_csv('yelp.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Check the head, info , and describe methods on yelp.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>business_id</th>\n",
       "      <th>date</th>\n",
       "      <th>review_id</th>\n",
       "      <th>stars</th>\n",
       "      <th>text</th>\n",
       "      <th>type</th>\n",
       "      <th>user_id</th>\n",
       "      <th>cool</th>\n",
       "      <th>useful</th>\n",
       "      <th>funny</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9yKzy9PApeiPPOUJEtnvkg</td>\n",
       "      <td>2011-01-26</td>\n",
       "      <td>fWKvX83p0-ka4JS3dc6E5A</td>\n",
       "      <td>5</td>\n",
       "      <td>My wife took me here on my birthday for breakf...</td>\n",
       "      <td>review</td>\n",
       "      <td>rLtl8ZkDX5vH5nAx9C3q5Q</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ZRJwVLyzEJq1VAihDhYiow</td>\n",
       "      <td>2011-07-27</td>\n",
       "      <td>IjZ33sJrzXqU-0X6U8NwyA</td>\n",
       "      <td>5</td>\n",
       "      <td>I have no idea why some people give bad review...</td>\n",
       "      <td>review</td>\n",
       "      <td>0a2KyEL0d3Yb1V6aivbIuQ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6oRAC4uyJCsJl1X0WZpVSA</td>\n",
       "      <td>2012-06-14</td>\n",
       "      <td>IESLBzqUCLdSzSqm0eCSxQ</td>\n",
       "      <td>4</td>\n",
       "      <td>love the gyro plate. Rice is so good and I als...</td>\n",
       "      <td>review</td>\n",
       "      <td>0hT2KtfLiobPvh6cDC8JQg</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>_1QQZuf4zZOyFCvXc0o6Vg</td>\n",
       "      <td>2010-05-27</td>\n",
       "      <td>G-WvGaISbqqaMHlNnByodA</td>\n",
       "      <td>5</td>\n",
       "      <td>Rosie, Dakota, and I LOVE Chaparral Dog Park!!...</td>\n",
       "      <td>review</td>\n",
       "      <td>uZetl9T0NcROGOyFfughhg</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6ozycU1RpktNG2-1BroVtw</td>\n",
       "      <td>2012-01-05</td>\n",
       "      <td>1uJFq2r5QfJG_6ExMRCaGw</td>\n",
       "      <td>5</td>\n",
       "      <td>General Manager Scott Petello is a good egg!!!...</td>\n",
       "      <td>review</td>\n",
       "      <td>vYmM4KTsC8ZfQBg-j5MWkw</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              business_id        date               review_id  stars  \\\n",
       "0  9yKzy9PApeiPPOUJEtnvkg  2011-01-26  fWKvX83p0-ka4JS3dc6E5A      5   \n",
       "1  ZRJwVLyzEJq1VAihDhYiow  2011-07-27  IjZ33sJrzXqU-0X6U8NwyA      5   \n",
       "2  6oRAC4uyJCsJl1X0WZpVSA  2012-06-14  IESLBzqUCLdSzSqm0eCSxQ      4   \n",
       "3  _1QQZuf4zZOyFCvXc0o6Vg  2010-05-27  G-WvGaISbqqaMHlNnByodA      5   \n",
       "4  6ozycU1RpktNG2-1BroVtw  2012-01-05  1uJFq2r5QfJG_6ExMRCaGw      5   \n",
       "\n",
       "                                                text    type  \\\n",
       "0  My wife took me here on my birthday for breakf...  review   \n",
       "1  I have no idea why some people give bad review...  review   \n",
       "2  love the gyro plate. Rice is so good and I als...  review   \n",
       "3  Rosie, Dakota, and I LOVE Chaparral Dog Park!!...  review   \n",
       "4  General Manager Scott Petello is a good egg!!!...  review   \n",
       "\n",
       "                  user_id  cool  useful  funny  \n",
       "0  rLtl8ZkDX5vH5nAx9C3q5Q     2       5      0  \n",
       "1  0a2KyEL0d3Yb1V6aivbIuQ     0       0      0  \n",
       "2  0hT2KtfLiobPvh6cDC8JQg     0       1      0  \n",
       "3  uZetl9T0NcROGOyFfughhg     1       2      0  \n",
       "4  vYmM4KTsC8ZfQBg-j5MWkw     0       0      0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yelp.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10000 entries, 0 to 9999\n",
      "Data columns (total 10 columns):\n",
      " #   Column       Non-Null Count  Dtype \n",
      "---  ------       --------------  ----- \n",
      " 0   business_id  10000 non-null  object\n",
      " 1   date         10000 non-null  object\n",
      " 2   review_id    10000 non-null  object\n",
      " 3   stars        10000 non-null  int64 \n",
      " 4   text         10000 non-null  object\n",
      " 5   type         10000 non-null  object\n",
      " 6   user_id      10000 non-null  object\n",
      " 7   cool         10000 non-null  int64 \n",
      " 8   useful       10000 non-null  int64 \n",
      " 9   funny        10000 non-null  int64 \n",
      "dtypes: int64(4), object(6)\n",
      "memory usage: 781.4+ KB\n"
     ]
    }
   ],
   "source": [
    "yelp.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stars</th>\n",
       "      <th>cool</th>\n",
       "      <th>useful</th>\n",
       "      <th>funny</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.777500</td>\n",
       "      <td>0.876800</td>\n",
       "      <td>1.409300</td>\n",
       "      <td>0.701300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.214636</td>\n",
       "      <td>2.067861</td>\n",
       "      <td>2.336647</td>\n",
       "      <td>1.907942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>77.000000</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>57.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              stars          cool        useful         funny\n",
       "count  10000.000000  10000.000000  10000.000000  10000.000000\n",
       "mean       3.777500      0.876800      1.409300      0.701300\n",
       "std        1.214636      2.067861      2.336647      1.907942\n",
       "min        1.000000      0.000000      0.000000      0.000000\n",
       "25%        3.000000      0.000000      0.000000      0.000000\n",
       "50%        4.000000      0.000000      1.000000      0.000000\n",
       "75%        5.000000      1.000000      2.000000      1.000000\n",
       "max        5.000000     77.000000     76.000000     57.000000"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yelp.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Create a new column called \"text length\" which is the number of words in the text column.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "yelp['text length'] = yelp['text'].apply(len)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# EDA\n",
    "\n",
    "Let's explore the data\n",
    "\n",
    "## Imports\n",
    "\n",
    "**Import the data visualization libraries if you haven't done so already.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Use FacetGrid from the seaborn library to create a grid of 5 histograms of text length based off of the star ratings. Reference the seaborn documentation for hints on this**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x23e72206a00>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x216 with 5 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style('whitegrid')\n",
    "g = sns.FacetGrid(yelp, col = 'stars')\n",
    "g.map(plt.hist,'text length')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x121e705f8>"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nrkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x121e70ba8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Create a boxplot of text length for each star category.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='stars', ylabel='text length'>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x='stars',y='text length',data=yelp, palette='rainbow')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Create a countplot of the number of occurrences for each type of star rating.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='stars', ylabel='count'>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='stars',data=yelp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Use groupby to get the mean values of the numerical columns, you should be able to create this dataframe with the operation:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "stars = yelp.groupby('stars').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cool</th>\n",
       "      <th>useful</th>\n",
       "      <th>funny</th>\n",
       "      <th>test_length</th>\n",
       "      <th>text length</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>stars</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.576769</td>\n",
       "      <td>1.604806</td>\n",
       "      <td>1.056075</td>\n",
       "      <td>826.515354</td>\n",
       "      <td>826.515354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.719525</td>\n",
       "      <td>1.563107</td>\n",
       "      <td>0.875944</td>\n",
       "      <td>842.256742</td>\n",
       "      <td>842.256742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.788501</td>\n",
       "      <td>1.306639</td>\n",
       "      <td>0.694730</td>\n",
       "      <td>758.498289</td>\n",
       "      <td>758.498289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.954623</td>\n",
       "      <td>1.395916</td>\n",
       "      <td>0.670448</td>\n",
       "      <td>712.923142</td>\n",
       "      <td>712.923142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.944261</td>\n",
       "      <td>1.381780</td>\n",
       "      <td>0.608631</td>\n",
       "      <td>624.999101</td>\n",
       "      <td>624.999101</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           cool    useful     funny  test_length  text length\n",
       "stars                                                        \n",
       "1      0.576769  1.604806  1.056075   826.515354   826.515354\n",
       "2      0.719525  1.563107  0.875944   842.256742   842.256742\n",
       "3      0.788501  1.306639  0.694730   758.498289   758.498289\n",
       "4      0.954623  1.395916  0.670448   712.923142   712.923142\n",
       "5      0.944261  1.381780  0.608631   624.999101   624.999101"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stars"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Use the corr() method on that groupby dataframe to produce this dataframe:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "corr = stars.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cool</th>\n",
       "      <th>useful</th>\n",
       "      <th>funny</th>\n",
       "      <th>test_length</th>\n",
       "      <th>text length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>cool</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.743329</td>\n",
       "      <td>-0.944939</td>\n",
       "      <td>-0.857664</td>\n",
       "      <td>-0.857664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>useful</th>\n",
       "      <td>-0.743329</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.894506</td>\n",
       "      <td>0.699881</td>\n",
       "      <td>0.699881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>funny</th>\n",
       "      <td>-0.944939</td>\n",
       "      <td>0.894506</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.843461</td>\n",
       "      <td>0.843461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_length</th>\n",
       "      <td>-0.857664</td>\n",
       "      <td>0.699881</td>\n",
       "      <td>0.843461</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>text length</th>\n",
       "      <td>-0.857664</td>\n",
       "      <td>0.699881</td>\n",
       "      <td>0.843461</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 cool    useful     funny  test_length  text length\n",
       "cool         1.000000 -0.743329 -0.944939    -0.857664    -0.857664\n",
       "useful      -0.743329  1.000000  0.894506     0.699881     0.699881\n",
       "funny       -0.944939  0.894506  1.000000     0.843461     0.843461\n",
       "test_length -0.857664  0.699881  0.843461     1.000000     1.000000\n",
       "text length -0.857664  0.699881  0.843461     1.000000     1.000000"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Then use seaborn to create a heatmap based off that .corr() dataframe:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(corr,cmap='coolwarm',annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x120edb828>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x120edb048>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## NLP Classification Task\n",
    "\n",
    "Let's move on to the actual task. To make things a little easier, go ahead and only grab reviews that were either 1 star or 5 stars.\n",
    "\n",
    "**Create a dataframe called yelp_class that contains the columns of yelp dataframe but for only the 1 or 5 star reviews.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "yelp_class = yelp[(yelp.stars == 1) | (yelp.stars == 5)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>business_id</th>\n",
       "      <th>date</th>\n",
       "      <th>review_id</th>\n",
       "      <th>stars</th>\n",
       "      <th>text</th>\n",
       "      <th>type</th>\n",
       "      <th>user_id</th>\n",
       "      <th>cool</th>\n",
       "      <th>useful</th>\n",
       "      <th>funny</th>\n",
       "      <th>test_length</th>\n",
       "      <th>text length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9yKzy9PApeiPPOUJEtnvkg</td>\n",
       "      <td>2011-01-26</td>\n",
       "      <td>fWKvX83p0-ka4JS3dc6E5A</td>\n",
       "      <td>5</td>\n",
       "      <td>My wife took me here on my birthday for breakf...</td>\n",
       "      <td>review</td>\n",
       "      <td>rLtl8ZkDX5vH5nAx9C3q5Q</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>889</td>\n",
       "      <td>889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ZRJwVLyzEJq1VAihDhYiow</td>\n",
       "      <td>2011-07-27</td>\n",
       "      <td>IjZ33sJrzXqU-0X6U8NwyA</td>\n",
       "      <td>5</td>\n",
       "      <td>I have no idea why some people give bad review...</td>\n",
       "      <td>review</td>\n",
       "      <td>0a2KyEL0d3Yb1V6aivbIuQ</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1345</td>\n",
       "      <td>1345</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              business_id        date               review_id  stars  \\\n",
       "0  9yKzy9PApeiPPOUJEtnvkg  2011-01-26  fWKvX83p0-ka4JS3dc6E5A      5   \n",
       "1  ZRJwVLyzEJq1VAihDhYiow  2011-07-27  IjZ33sJrzXqU-0X6U8NwyA      5   \n",
       "\n",
       "                                                text    type  \\\n",
       "0  My wife took me here on my birthday for breakf...  review   \n",
       "1  I have no idea why some people give bad review...  review   \n",
       "\n",
       "                  user_id  cool  useful  funny  test_length  text length  \n",
       "0  rLtl8ZkDX5vH5nAx9C3q5Q     2       5      0          889          889  \n",
       "1  0a2KyEL0d3Yb1V6aivbIuQ     0       0      0         1345         1345  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yelp_class.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Create two objects X and y. X will be the 'text' column of yelp_class and y will be the 'stars' column of yelp_class. (Your features and target/labels)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = yelp_class['text']\n",
    "y = yelp_class['stars']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Import CountVectorizer and create a CountVectorizer object.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "\n",
    "cv = CountVectorizer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Use the fit_transform method on the CountVectorizer object and pass in X (the 'text' column). Save this result by overwriting X.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = cv.fit_transform(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train Test Split\n",
    "\n",
    "Let's split our data into training and testing data.\n",
    "\n",
    "** Use train_test_split to split up the data into X_train, X_test, y_train, y_test. Use test_size=0.3 and random_state=101 **"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    " X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training a Model\n",
    "\n",
    "Time to train a model!\n",
    "\n",
    "** Import MultinomialNB and create an instance of the estimator and call is nb **"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import MultinomialNB\n",
    "\n",
    "nb = MultinomialNB()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Now fit nb using the training data.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultinomialNB()"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nb.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predictions and Evaluations\n",
    "\n",
    "Time to see how our model did!\n",
    "\n",
    "**Use the predict method off of nb to predict labels from X_test.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = nb.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Create a confusion matrix and classification report using these predictions and y_test **"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix, classification_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[159  69]\n",
      " [ 22 976]] \n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.88      0.70      0.78       228\n",
      "           5       0.93      0.98      0.96       998\n",
      "\n",
      "    accuracy                           0.93      1226\n",
      "   macro avg       0.91      0.84      0.87      1226\n",
      "weighted avg       0.92      0.93      0.92      1226\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(y_test,pred),'\\n')\n",
    "print(classification_report(y_test,pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Great! Let's see what happens if we try to include TF-IDF to this process using a pipeline.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using Text Processing\n",
    "\n",
    "** Import TfidfTransformer from sklearn. **"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfTransformer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Import Pipeline from sklearn. **"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.pipeline import Pipeline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Now create a pipeline with the following steps:CountVectorizer(), TfidfTransformer(),MultinomialNB()**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "pipeline = Pipeline([\n",
    "    ('bow',CountVectorizer()),\n",
    "    ('tfidf',TfidfTransformer()),\n",
    "    ('Classifier',MultinomialNB())\n",
    "])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using the Pipeline\n",
    "\n",
    "**Time to use the pipeline! Remember this pipeline has all your pre-process steps in it already, meaning we'll need to re-split the original data (Remember that we overwrote X as the CountVectorized version. What we need is just the text**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train Test Split\n",
    "\n",
    "**Redo the train test split on the yelp_class object.**"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "X = yelp_class['text']\n",
    "y = yelp_class['stars']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Now fit the pipeline to the training data. Remember you can't use the same training data as last time because that data has already been vectorized. We need to pass in just the text and labels**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "lower not found",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Input \u001b[1;32mIn [78]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[43mpipeline\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\sklearn\\pipeline.py:390\u001b[0m, in \u001b[0;36mPipeline.fit\u001b[1;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[0;32m    364\u001b[0m \u001b[38;5;124;03m\"\"\"Fit the model.\u001b[39;00m\n\u001b[0;32m    365\u001b[0m \n\u001b[0;32m    366\u001b[0m \u001b[38;5;124;03mFit all the transformers one after the other and transform the\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    387\u001b[0m \u001b[38;5;124;03m    Pipeline with fitted steps.\u001b[39;00m\n\u001b[0;32m    388\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    389\u001b[0m fit_params_steps \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_fit_params(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mfit_params)\n\u001b[1;32m--> 390\u001b[0m Xt \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fit(X, y, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mfit_params_steps)\n\u001b[0;32m    391\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m _print_elapsed_time(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPipeline\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_log_message(\u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msteps) \u001b[38;5;241m-\u001b[39m \u001b[38;5;241m1\u001b[39m)):\n\u001b[0;32m    392\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_final_estimator \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpassthrough\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\sklearn\\pipeline.py:348\u001b[0m, in \u001b[0;36mPipeline._fit\u001b[1;34m(self, X, y, **fit_params_steps)\u001b[0m\n\u001b[0;32m    346\u001b[0m     cloned_transformer \u001b[38;5;241m=\u001b[39m clone(transformer)\n\u001b[0;32m    347\u001b[0m \u001b[38;5;66;03m# Fit or load from cache the current transformer\u001b[39;00m\n\u001b[1;32m--> 348\u001b[0m X, fitted_transformer \u001b[38;5;241m=\u001b[39m fit_transform_one_cached(\n\u001b[0;32m    349\u001b[0m     cloned_transformer,\n\u001b[0;32m    350\u001b[0m     X,\n\u001b[0;32m    351\u001b[0m     y,\n\u001b[0;32m    352\u001b[0m     \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m    353\u001b[0m     message_clsname\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPipeline\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    354\u001b[0m     message\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_log_message(step_idx),\n\u001b[0;32m    355\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mfit_params_steps[name],\n\u001b[0;32m    356\u001b[0m )\n\u001b[0;32m    357\u001b[0m \u001b[38;5;66;03m# Replace the transformer of the step with the fitted\u001b[39;00m\n\u001b[0;32m    358\u001b[0m \u001b[38;5;66;03m# transformer. This is necessary when loading the transformer\u001b[39;00m\n\u001b[0;32m    359\u001b[0m \u001b[38;5;66;03m# from the cache.\u001b[39;00m\n\u001b[0;32m    360\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msteps[step_idx] \u001b[38;5;241m=\u001b[39m (name, fitted_transformer)\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\joblib\\memory.py:349\u001b[0m, in \u001b[0;36mNotMemorizedFunc.__call__\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    348\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m--> 349\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfunc(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\sklearn\\pipeline.py:893\u001b[0m, in \u001b[0;36m_fit_transform_one\u001b[1;34m(transformer, X, y, weight, message_clsname, message, **fit_params)\u001b[0m\n\u001b[0;32m    891\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m _print_elapsed_time(message_clsname, message):\n\u001b[0;32m    892\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(transformer, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfit_transform\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n\u001b[1;32m--> 893\u001b[0m         res \u001b[38;5;241m=\u001b[39m transformer\u001b[38;5;241m.\u001b[39mfit_transform(X, y, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mfit_params)\n\u001b[0;32m    894\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    895\u001b[0m         res \u001b[38;5;241m=\u001b[39m transformer\u001b[38;5;241m.\u001b[39mfit(X, y, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mfit_params)\u001b[38;5;241m.\u001b[39mtransform(X)\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\sklearn\\feature_extraction\\text.py:1330\u001b[0m, in \u001b[0;36mCountVectorizer.fit_transform\u001b[1;34m(self, raw_documents, y)\u001b[0m\n\u001b[0;32m   1322\u001b[0m             warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[0;32m   1323\u001b[0m                 \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mUpper case characters found in\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1324\u001b[0m                 \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m vocabulary while \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlowercase\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1325\u001b[0m                 \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m is True. These entries will not\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1326\u001b[0m                 \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m be matched with any documents\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1327\u001b[0m             )\n\u001b[0;32m   1328\u001b[0m             \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[1;32m-> 1330\u001b[0m vocabulary, X \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_count_vocab\u001b[49m\u001b[43m(\u001b[49m\u001b[43mraw_documents\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfixed_vocabulary_\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1332\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbinary:\n\u001b[0;32m   1333\u001b[0m     X\u001b[38;5;241m.\u001b[39mdata\u001b[38;5;241m.\u001b[39mfill(\u001b[38;5;241m1\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\sklearn\\feature_extraction\\text.py:1201\u001b[0m, in \u001b[0;36mCountVectorizer._count_vocab\u001b[1;34m(self, raw_documents, fixed_vocab)\u001b[0m\n\u001b[0;32m   1199\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m doc \u001b[38;5;129;01min\u001b[39;00m raw_documents:\n\u001b[0;32m   1200\u001b[0m     feature_counter \u001b[38;5;241m=\u001b[39m {}\n\u001b[1;32m-> 1201\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m feature \u001b[38;5;129;01min\u001b[39;00m \u001b[43manalyze\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdoc\u001b[49m\u001b[43m)\u001b[49m:\n\u001b[0;32m   1202\u001b[0m         \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m   1203\u001b[0m             feature_idx \u001b[38;5;241m=\u001b[39m vocabulary[feature]\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\sklearn\\feature_extraction\\text.py:113\u001b[0m, in \u001b[0;36m_analyze\u001b[1;34m(doc, analyzer, tokenizer, ngrams, preprocessor, decoder, stop_words)\u001b[0m\n\u001b[0;32m    111\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    112\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m preprocessor \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m--> 113\u001b[0m         doc \u001b[38;5;241m=\u001b[39m \u001b[43mpreprocessor\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdoc\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    114\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m tokenizer \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m    115\u001b[0m         doc \u001b[38;5;241m=\u001b[39m tokenizer(doc)\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\sklearn\\feature_extraction\\text.py:71\u001b[0m, in \u001b[0;36m_preprocess\u001b[1;34m(doc, accent_function, lower)\u001b[0m\n\u001b[0;32m     52\u001b[0m \u001b[38;5;124;03m\"\"\"Chain together an optional series of text preprocessing steps to\u001b[39;00m\n\u001b[0;32m     53\u001b[0m \u001b[38;5;124;03mapply to a document.\u001b[39;00m\n\u001b[0;32m     54\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     68\u001b[0m \u001b[38;5;124;03m    preprocessed string\u001b[39;00m\n\u001b[0;32m     69\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m     70\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m lower:\n\u001b[1;32m---> 71\u001b[0m     doc \u001b[38;5;241m=\u001b[39m \u001b[43mdoc\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mlower\u001b[49m()\n\u001b[0;32m     72\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m accent_function \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m     73\u001b[0m     doc \u001b[38;5;241m=\u001b[39m accent_function(doc)\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\scipy\\sparse\\base.py:687\u001b[0m, in \u001b[0;36mspmatrix.__getattr__\u001b[1;34m(self, attr)\u001b[0m\n\u001b[0;32m    685\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgetnnz()\n\u001b[0;32m    686\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 687\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m(attr \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m not found\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mAttributeError\u001b[0m: lower not found"
     ]
    }
   ],
   "source": [
    "pipeline.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Predictions and Evaluation\n",
    "\n",
    "** Now use the pipeline to predict from the X_test and create a classification report and confusion matrix. You should notice strange results.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "prediction = pipeline.predict(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  0 228]\n",
      " [  0 998]]\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          1       0.00      0.00      0.00       228\n",
      "          5       0.81      1.00      0.90       998\n",
      "\n",
      "avg / total       0.66      0.81      0.73      1226\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/marci/anaconda/lib/python3.5/site-packages/sklearn/metrics/classification.py:1074: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(y_test,pred),'\\n')\n",
    "print(classification_report(y_test,pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looks like Tf-Idf actually made things worse! That is it for this project. But there is still a lot more you can play with:\n",
    "\n",
    "**Some other things to try....**\n",
    "Try going back and playing around with the pipeline steps and seeing if creating a custom analyzer like we did in the lecture helps (note: it probably won't). Or recreate the pipeline with just the CountVectorizer() and NaiveBayes. Does changing the ML model at the end to another classifier help at all?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Great Job!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
